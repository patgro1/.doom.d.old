#+TITLE: Doom Emacs configuration file
#+AUTHOR: Patrick Grogan
* Welcome
This is my literate configuration for doom emacs. I'm choosing to use doom because it was an easy jump from vim to Emacs without thinking too much. Here is a list by functionality of what needs to be present on the system for full experience.
** Fonts
- [[FiraCode Nerd Font]]
- [[https://www.google.com/get/noto/help/emoji/][Noto Color Emoji Font]]
* Requirements
My config assumes some
* Global
** Personal Information
#+begin_src emacs-lisp :tangle config.el
(setq user-full-name "Patrick Grogan"
      user-mail-address "po.grogan@gmail.com")
#+end_src
** Emacs behavior
*** Backups
I really don't like the backup file managemnent from Emacs. I think our systems are stable enough to fully turn them off. However, I also totally know that if I completely turn them off, it'll come back and bite my ass later on so I'm settly on just changing the directory where the files are put in a hidden directory in my home folder.
#+begin_src emacs-lisp :tangle config.el
(setq backup-directory-alist '(("." . "~/.emacs_backup"))
      make-backup-files t)
#+end_src
*** Undo
So with doom we need to specify the undo manager we want to use. As of right now, I'm using undo-fu just because I want to undo/redo single steps easily.
#+begin_src emacs-lisp :tangle config.el
(evil-set-undo-system 'undo-fu)
#+end_src
*** Whitespace Management
Tabs are bad, make sure we use spaces. I like 4 spaces as tab because it gives visually cleaner code IMO. However, I get that deeply nested code can quickly get to a situation where we lose many character on the line due to this kind of indentation. It is something I always hesitate on. What is sure though is that I want to make sure there is no extra spaces on lines.
#+begin_src emacs-lisp :tangle config.el
(setq-default indent-tabs-mode nil
              tab-width 4
              standard-indent 4
              tab-stop-list (number-sequence 4 120 4))
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** UI Configuration
*** Font and faces
Right now, im in love with FiraCode but im adding the nerd font patch on it so I can edit emojis as I want. However, i think it is important to have a variable pitch font to read text or such (as org mode for example.) So using the mixed-pitch package we can achieve that easily. We just need to define the variable-pitch font. Since not all fonts are available everywhere, I'm adding that font based on the OS. Default value is for Linux than I let the value change for Mac.
#+begin_src emacs-lisp :tangle config.el
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 16)
      doom-unicode-font (font-spec :name "Noto Color Emoji" :size 20)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 16))

; TODO: Choose a nice variable pitch font for Mac
(if (eq system-type 'Darwin)
    (setq doom-variable-pitch-font (font-spec :family "Times" :size 16)))
(add-hook! 'text-mode-hook 'mixed-pitch-mode)
#+end_src
*** Line numbers
The best way to navigate is to use the relative line numbers. Quick glance and ~35j~ to get down 35 lines without approximation our any mental calculation involved.
#+begin_src emacs-lisp :tangle config.el
(setq display-line-numbers-type 'relative)
#+end_src
*** Theme
This theme is the best IMO but I'm always open to change to something else when I'm getting tired of this one.
#+begin_src emacs-lisp :tangle config.el
(load-theme 'doom-dark+ t)
#+end_src
* Config Utilities
** Auto-tangle
We are adding a hook to org mode that will make tangle this file each time it is saved. To do so, we are loooking if the org file saved is in the doom user private configuration folder. If so, we call make in the the folder to make sure everything is retangled.
#+begin_src emacs-lisp :tangle config.el
(defun pg/tangle-org-config ()
    (interactive)
    (when (string-equal default-directory  (expand-file-name doom-private-dir))
      (message " Retangle config org files")
      (shell-command "make")))

;l(add-hook! 'org-mode-hook (lambda ()
;l                            (add-hook 'after-save-hook #'pg/tangle-org-config-on-save)
;l                            ))

#+end_src
* Core Packages
* Development
* Org mode
** UI and look improvements
In org mode, we do not need the line numbers and I pregfer a lot when we are using Bullets instead of stars to make the section delimiters.
#+begin_src  emacs-lisp :tangle config.el
(use-package! org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :config
  (setq org-bullets-bullet-list '("○" "☉" "◎" "◉" "○" "◌" "◎" "●" "◦" "◯")))
(defun pg/nolinum()
  (interactive)
  (setq display-line-numbers nil))
(add-hook 'org-mode-hook 'pg/nolinum)
#+end_src

#+TITLE: Doom Emacs configuration file
#+AUTHOR: Patrick Grogan
* Welcome
This is my literate configuration for doom emacs. I'm choosing to use doom because it was an easy jump from vim to Emacs without thinking too much. Here is a list by functionality of what needs to be present on the system for full experience.
** Fonts
- [[FiraCode Nerd Font]]
- [[https://www.google.com/get/noto/help/emoji/][Noto Color Emoji Font]]
* Requirements
My config assumes some
* Global
** Personal Information
#+begin_src emacs-lisp :tangle config.el
(setq user-full-name "Patrick Grogan"
      user-mail-address "po.grogan@gmail.com")
#+end_src
** Emacs behavior
*** Backups
I really don't like the backup file managemnent from Emacs. I think our systems are stable enough to fully turn them off. However, I also totally know that if I completely turn them off, it'll come back and bite my ass later on so I'm settly on just changing the directory where the files are put in a hidden directory in my home folder.
#+begin_src emacs-lisp :tangle config.el
(setq backup-directory-alist '(("." . "~/.emacs_backup"))
      make-backup-files t)
#+end_src
*** Undo
So with doom we need to specify the undo manager we want to use. As of right now, I'm using undo-fu just because I want to undo/redo single steps easily.
#+begin_src emacs-lisp :tangle config.el
(evil-set-undo-system 'undo-fu)
#+end_src
*** Whitespace Management
Tabs are bad, make sure we use spaces. I like 4 spaces as tab because it gives visually cleaner code IMO. However, I get that deeply nested code can quickly get to a situation where we lose many character on the line due to this kind of indentation. It is something I always hesitate on. What is sure though is that I want to make sure there is no extra spaces on lines.
#+begin_src emacs-lisp :tangle config.el
(setq-default indent-tabs-mode nil
              tab-width 4
              standard-indent 4
              tab-stop-list (number-sequence 4 120 4))
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
** UI Configuration
*** Font and faces
Right now, im in love with FiraCode but im adding the nerd font patch on it so I can edit emojis as I want. However, i think it is important to have a variable pitch font to read text or such (as org mode for example.) So using the mixed-pitch package we can achieve that easily. We just need to define the variable-pitch font. Since not all fonts are available everywhere, I'm adding that font based on the OS. Default value is for Linux than I let the value change for Mac.
#+begin_src emacs-lisp :tangle config.el
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 16)
      doom-unicode-font (font-spec :name "Noto Color Emoji" :size 20))

; TODO: Choose a nice variable pitch font for Mac
(if (eq system-type 'darwin)
    (setq doom-variable-pitch-font (font-spec :family "Geneva" :size 16))
    (setq doom-variable-pitch-font (font-spec :family "Ubuntu" :size 16)))
(add-hook! 'org-mode-hook 'mixed-pitch-mode)
#+end_src
*** Line numbers
The best way to navigate is to use the relative line numbers. Quick glance and ~35j~ to get down 35 lines without approximation our any mental calculation involved.
#+begin_src emacs-lisp :tangle config.el
(setq display-line-numbers-type 'relative)
#+end_src
*** Theme
This theme is the best IMO but I'm always open to change to something else when I'm getting tired of this one.
#+begin_src emacs-lisp :tangle config.el
(load-theme 'doom-dark+ t)
#+end_src
* Config Utilities
** Auto-tangle
We are adding a hook to org mode that will make tangle this file each time it is saved. To do so, we are loooking if the org file saved is in the doom user private configuration folder. If so, we call make in the the folder to make sure everything is retangled.
#+begin_src emacs-lisp :tangle config.el
(defun pg/tangle-org-config ()
    (interactive)
    (when (string-equal default-directory  (expand-file-name doom-private-dir))
      (message " Retangle config org files")
      (shell-command "make")))
;l(add-hook! 'org-mode-hook (lambda ()
;l                            (add-hook 'after-save-hook #'pg/tangle-org-config-on-save)
;l                            ))

#+end_src
** Personal and private functions
Here we check for a personal file inside the configuration folder. If it exists we load it. It can contain extra configuration for work related stuff and suchk
#+begin_src emacs-lisp :tangle config.el
(load (concat doom-private-dir "private.el") t)
#+end_src
* Core Packages
** Projectile
Projectile is a package used to manage projects. We are using alien mode to fuzzy find accross the projects for files. My configuration also assumes that projects are all contained within the ~\~/workspace~ folder (eclipse world...)
#+begin_src emacs-lisp :tangle config.el
(after! projectile
  (setq projectile-indexing-mode 'alien
        projectile-project-search-path '("~/workspace")))
#+end_src
** Magit
* Custom Utility Functions
** Display ansi colors
In my development I sometimes need to open log containing ansi code. Instead of clearing it, I prefer display the colors so we can see irregularities more easily. This function enable that.
#+begin_src emacs-lisp :tangle config.el
(after! ansi-color
  (defun pg/display-ansi-colors ()
    (interactive)
    (ansi-color-apply-on-region (point-min) (point-max))))
#+end_src
** Setup python virtual environment
I'm usually using virtualenvironment for all my development. It is nice to be able to use them within emacs so LSP, jedi and such works with the environment instead of system Python. To do that, I am using the virtualenvwrapper package and the pyenv package coming with Doom. This config assumes that all virtualenvs are within the ~\~virtualenvs~ folder.
#+begin_src emacs-lisp :tangle config.el
(setenv "WORKON_HOME" "~/virtualenvs")
(defun pg/setup-virtualenv (&optional name)
  (interactive
   (list
    (completing-read "Work on: " (pyvenv-virtualenv-list)
                     nil t nil 'pyenv-workon-history nil nil)))
  (pyvenv-deactivate)
  (pyvenv-workon name))
#+end_src
* Development
** Language Server
*** lsp-mode
We use LSP mode for almost everythnig close to IDE features. As an evil user, i need to use a different method than the normal ~lsp-keymap-prefix~ as i want to use ~<space>-l~ as my main key to enter lsp mode functions. We also want to enable which-key integration for LSP to help us with bindings we do not use that often.
#+begin_src emacs-lisp :tangle config.el
(defun pg/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode t))

(use-package! lsp-mode
  :hook (lsp-mode . pg/lsp-mode-setup)
  :config (lsp-enable-which-key-integration t))
#+end_src
*** lsp-ui
lsp-ui gives enhancement over the normal lsp-mode information we get. Especially, it gives information in the frame which is better in my opinion.
#+begin_src emacs-lisp :tangle config.el
(after! lsp-ui
  (add-hook 'lsp-mode #'lsp-ui-mode)
  (add-hook 'lsp-ui #'lambda(
                             lsp-ui-doc-mode t))
  (setq lsp-ui-doc-position 'bottom))
#+end_src
*** Company box
This mode enables prettier company completion box with icons when possible.
#+begin_src emacs-lisp :tangle config.el
(use-package! company-box
  :hook (company-mode . company-box-mode))
#+end_src
** Languages
*** Python
For python, I make sure to use flycheck with python-flake8 as first linter.
#+begin_src emacs-lisp :tangle config.el
(defun pg/set-python-flycheck ()
  (interactive)
  (when (eq major-mode 'python-mode)
    (setq flycheck-checker 'python-flake8))
  (flycheck-reset-enabled-checker 'python-flake8))
(after! flycheck
  (add-hook! 'flycheck-mode-hook 'pg/set-python-flycheck))
#+end_src
Setting company mode for completion.
#+begin_src emacs-lisp :tangle config.el
(after! company-jedi
  (add-to-list 'company-backends 'company-jedi)
  (setq jedi:complete-on-dot t)
  (add-hook! '(inferior-python-mode python-mode) #'jedi:setup))
#+end_src
*** Verilog
Verilog mode is not really working like I would like to. Especially intentation around modules when you open a parenthesis at the end of the line, it indents at the parenthesis instead of a single indentation level. Until I'm done with me new systemverilog-mode, no choice but to still use this one though and adapt.
#+begin_src emacs-lisp :tangle config.el
(defun pg/setup-verilog-lsp ()
  (lsp)
  (flycheck-mode t)
  (add-to-list 'lsp-language-id-configuration '(verilog-mode . "verilog")))
(use-package! verilog-mode
  :custom
  (verilog-indent-level 4)
  (verilog-indent-level-directive 4)
  (verilog-indent-level-module 4)
  (verilog-indent-level-behavioral 4)
  (verilog-indent-level-declaration 4)
  (verilog-case-indent 4)
  (verilog-auto-newline nil)
  :config
  (rainbow-delimiters-mode t)
  (require 'lsp)
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection '("svls"))
                    :major-modes '(verilog-mode)
                    :priority -1))
  :hook (verilog-mode . pg/setup-verilog-lsp))
#+end_src
** Utilities
*** Rainbow delimiter
Rainbow delimiter is a package that will color same lever delimiter ~(), [], {}~ in one color and make sure the nested delimiter switch color. It is especially useful for lisp languages but I think it is super useful in all languages so ill turn it on for all prog-mode.
#+begin_src emacs-lisp :tangle config.el
(add-hook! prog-mode #'rainbow-delimiters-mode)
#+end_src
* Org mode
** UI and look improvements
In org mode, we do not need the line numbers and I pregfer a lot when we are using Bullets instead of stars to make the section delimiters.
#+begin_src  emacs-lisp :tangle config.el
(use-package! org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :config
  (setq org-bullets-bullet-list '("○" "☉" "◎" "◉" "○" "◌" "◎" "●" "◦" "◯")))
(defun pg/nolinum()
  (interactive)
  (setq display-line-numbers nil))
(add-hook 'org-mode-hook 'pg/nolinum)
#+end_src
